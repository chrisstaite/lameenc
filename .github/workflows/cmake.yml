name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]


jobs:

  build_linux2_24_64:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Execute the build
        uses: docker://quay.io/pypa/manylinux_2_24_x86_64
        with:
          entrypoint: bash
          args: /github/workspace/.github/workflows/build.sh
      - name: Archive built wheels
        uses: actions/upload-artifact@v2
        with:
          name: manylinux2_24_64
          path: build/*.whl
          if-no-files-found: error

  publish_linux2_24_64:
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: [ build_linux2_24_64 ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v4.1.7
      id: download
      with:
        name: manylinux2_24_64

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: ${{ steps.download.outputs.download-path }}

  build_linux2_24_32:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Execute the build
        uses: docker://quay.io/pypa/manylinux_2_24_i686
        with:
          entrypoint: linux32
          args: bash /github/workspace/.github/workflows/build.sh
      - name: Archive built wheels
        uses: actions/upload-artifact@v2
        with:
          name: manylinux2_24_32
          path: build/*.whl
          if-no-files-found: error

  publish_linux2_24_32:
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: [ build_linux2_24_32 ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v4.1.7
      id: download
      with:
        name: manylinux2_24_32

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: ${{ steps.download.outputs.download-path }}

  build_linux2_24_aarch64:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up emulation
        uses: docker/setup-qemu-action@v2
        with:
          platforms: aarch64

      - name: Execute the build
        uses: docker://quay.io/pypa/manylinux_2_24_aarch64
        with:
          entrypoint: bash
          args: /github/workspace/.github/workflows/build.sh
      - name: Archive built wheels
        uses: actions/upload-artifact@v2
        with:
          name: manylinux2_24_aarch64
          path: build/*.whl
          if-no-files-found: error

  publish_linux2_24_aarch64:
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: [ build_linux2_24_aarch64 ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v4.1.7
      id: download
      with:
        name: manylinux2_24_aarch64

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: ${{ steps.download.outputs.download-path }}

  build_linux2_28_64:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Execute the build
        uses: docker://quay.io/pypa/manylinux_2_28_x86_64
        with:
          entrypoint: bash
          args: /github/workspace/.github/workflows/build.sh
      - name: Archive built wheels
        uses: actions/upload-artifact@v2
        with:
          name: manylinux2_28_64
          path: build/*.whl
          if-no-files-found: error

  publish_linux2_28_64:
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: [ build_linux2_28_64 ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v4.1.7
      id: download
      with:
        name: manylinux2_28_64

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: ${{ steps.download.outputs.download-path }}

  build_linux2_28_aarch64:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up emulation
        uses: docker/setup-qemu-action@v2
        with:
          platforms: aarch64

      - name: Execute the build
        uses: docker://quay.io/pypa/manylinux_2_28_aarch64
        with:
          entrypoint: bash
          args: /github/workspace/.github/workflows/build.sh
      - name: Archive built wheels
        uses: actions/upload-artifact@v2
        with:
          name: manylinux2_28_aarch64
          path: build/*.whl
          if-no-files-found: error

  publish_linux2_28_aarch64:
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: [ build_linux2_28_aarch64 ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v4.1.7
      id: download
      with:
        name: manylinux2_28_aarch64

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: ${{ steps.download.outputs.download-path }}

  build_mac:
    runs-on: macos-latest

    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        arch: ['arm64', 'x86_64']

    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python dependencies
        run: python -m pip install --user setuptools wheel
      - uses: actions/checkout@v2
      - name: Build the wheel
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_OSX_ARCHITECTURES="${{ matrix.arch }}" -DPYTHON_VERSIONS=${{ matrix.python-version }} ..
          make
      - name: Archive built wheel
        uses: actions/upload-artifact@v2
        with:
          name: mac
          path: build/*.whl
          if-no-files-found: error

  publish_mac:
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: [ build_mac ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v4.1.7
      id: download
      with:
        name: mac

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: ${{ steps.download.outputs.download-path }}

  build_windows:
    runs-on: windows-2019

    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        arch: ['-AWin32', '-Ax64']
        python-arch: ['x86', 'x64']
        exclude:
          - arch: '-AWin32'
            python-arch: 'x64'
          - arch: '-Ax64'
            python-arch: 'x86'

    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.python-arch }}
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: python -m pip install --upgrade setuptools wheel
      - name: Build the wheel
        run: |
          mkdir build
          cd build
          cmake  -DPYTHON_VERSIONS=${{ matrix.python-version }} .. -G "Visual Studio 16 2019" ${{ matrix.arch }}
          cmake --build . --config Release
      - name: Archive built wheels
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: build/*.whl
          if-no-files-found: error

  publish_windows:
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: [ build_windows ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v4.1.7
      id: download
      with:
        name: windows

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: ${{ steps.download.outputs.download-path }}
